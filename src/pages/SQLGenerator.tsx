import React, { FC, useState, useMemo } from 'react';
import ReactFlow, { Node, Edge, Background, Controls, MiniMap, BackgroundVariant } from 'reactflow';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from '../../node_modules/react-i18next';
import { sqlParser } from '../services/sqlParser';
import { SearchIcon, RocketIcon, TrashIcon, CheckIcon, ArrowLeftIcon, PenIcon, ClockIcon } from '../components/UIIcons';
import CustomNode from '../components/CustomNode';
import { useTheme } from '../contexts/ThemeContext';
import { getTheme } from '../utils/theme';
import { isTauri } from '../utils/platform';
import '../styles/scrollbar.css';

const SQLGenerator: FC = () => {
  const navigate = useNavigate();
  const { t } = useTranslation();
  const [sqlQuery, setSqlQuery] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [previewData, setPreviewData] = useState<{ nodes: Node[], edges: Edge[] } | null>(null);
  const [generationMode, setGenerationMode] = useState<'new' | 'add'>('new');
  const { isDark } = useTheme();
  const theme = getTheme(isDark);

  const nodeTypes = useMemo(
    () => ({
      custom: CustomNode,
      csv_input: CustomNode,
      json_input: CustomNode,
      parquet_input: CustomNode,
      database_input: CustomNode,
      api_input: CustomNode,
      process: CustomNode,
      transform: CustomNode,
      filter: CustomNode,
      aggregate: CustomNode,
      join: CustomNode,
      split: CustomNode,
      model_train: CustomNode,
      model_predict: CustomNode,
      model_evaluate: CustomNode,
      csv_output: CustomNode,
      json_output: CustomNode,
      parquet_output: CustomNode,
      database_output: CustomNode,
      api_output: CustomNode,
      data_lake: CustomNode,
      data_warehouse: CustomNode,
      data_mart: CustomNode,
      bi_tool: CustomNode,
    }),
    []
  );

  const handlePreview = () => {
    if (!sqlQuery.trim()) {
      alert('Please enter a SQL query');
      return;
    }

    try {
      const parsedQuery = sqlParser.parseSQL(sqlQuery);
      const { nodes, edges } = sqlParser.generateNodesAndEdges(parsedQuery);
      
      // Use the layout generated by SQLParser (vertical flow)
      setPreviewData({ nodes, edges });
    } catch (error) {
      alert('Error parsing SQL query. Please check your syntax.');
      console.error('SQL Parse Error:', error);
    }
  };

  const handleGenerate = () => {
    if (!previewData) {
      alert('Please preview the query first');
      return;
    }

    setIsGenerating(true);
    
    // Store generated data in localStorage for the main editor to pick up
    const generatedData = {
      nodes: previewData.nodes,
      edges: previewData.edges,
      mode: generationMode, // Include the generation mode
      timestamp: Date.now()
    };
    localStorage.setItem('sql_generated_data', JSON.stringify(generatedData));
    
    setTimeout(() => {
      setIsGenerating(false);
      // Navigate back to editor with a flag to indicate new data is available
      navigate(`/?loadGenerated=true&mode=${generationMode}`);
    }, 500);
  };

  const handleClear = () => {
    setSqlQuery('');
    setPreviewData(null);
  };

  const sampleQueries = [
    {
      name: 'Simple Join',
      query: `SELECT u.name, o.total
FROM users u
JOIN orders o ON u.id = o.user_id
WHERE o.status = 'completed'
ORDER BY o.total DESC`
    },
    {
      name: 'Complex Query with CTE',
      query: `WITH sales_summary AS (
  SELECT 
    product_id,
    SUM(quantity) as total_qty,
    SUM(amount) as total_amount
  FROM sales
  WHERE date >= '2024-01-01'
  GROUP BY product_id
)
SELECT 
  p.name,
  ss.total_qty,
  ss.total_amount
FROM products p
JOIN sales_summary ss ON p.id = ss.product_id
ORDER BY ss.total_amount DESC`
    },
    {
      name: 'Data Warehouse Query',
      query: `SELECT 
  d.year,
  d.month,
  p.category,
  SUM(f.sales_amount) as total_sales,
  AVG(f.profit_margin) as avg_margin
FROM fact_sales f
JOIN dim_date d ON f.date_key = d.date_key
JOIN dim_product p ON f.product_key = p.product_key
JOIN dim_customer c ON f.customer_key = c.customer_key
WHERE d.year = 2024
GROUP BY d.year, d.month, p.category
ORDER BY total_sales DESC`
    }
  ];

  const pageStyle = {
    display: 'flex',
    flexDirection: 'column' as const,
    width: '100%',
    height: isTauri() ? 'calc(100vh - 32px)' : '100vh',
    backgroundColor: theme.colors.background,
  };

  const headerStyle = {
    backgroundColor: theme.colors.surface,
    borderBottom: `1px solid ${theme.colors.border}`,
    padding: '16px 24px',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    boxShadow: `0 2px 4px ${theme.colors.shadowLight}`,
  };

  const titleStyle = {
    fontSize: theme.typography.fontSize.xl,
    fontWeight: theme.typography.fontWeight.bold,
    color: theme.colors.textPrimary,
    margin: 0,
  };

  const backButtonStyle = {
    padding: '8px 16px',
    backgroundColor: theme.colors.accent,
    color: theme.colors.surface,
    border: 'none',
    borderRadius: theme.borderRadius.md,
    cursor: 'pointer',
    fontSize: theme.typography.fontSize.md,
    fontWeight: theme.typography.fontWeight.medium,
    display: 'flex',
    alignItems: 'center',
    gap: '8px',
    transition: theme.transitions.fast,
    minWidth: '140px',
    whiteSpace: 'nowrap' as const,
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  };

  const contentStyle = {
    display: 'flex',
    flexGrow: 1,
    padding: '24px',
    gap: '24px',
    overflow: 'hidden',
  };

  const leftPanelStyle = {
    flex: 1,
    backgroundColor: theme.colors.surface,
    borderRadius: theme.borderRadius.lg,
    padding: '24px',
    boxShadow: `0 2px 8px ${theme.colors.shadowMedium}`,
    border: `1px solid ${theme.colors.border}`,
    display: 'flex',
    flexDirection: 'column' as const,
    overflow: 'hidden',
  };

  const rightPanelStyle = {
    flex: 1,
    backgroundColor: theme.colors.surface,
    borderRadius: theme.borderRadius.lg,
    padding: '24px',
    boxShadow: `0 2px 8px ${theme.colors.shadowMedium}`,
    border: `1px solid ${theme.colors.border}`,
    display: 'flex',
    flexDirection: 'column' as const,
    overflow: 'hidden',
  };

  const textareaStyle = {
    width: '100%',
    height: '300px',
    padding: '12px',
    border: `1px solid ${theme.colors.border}`,
    borderRadius: theme.borderRadius.md,
    fontSize: theme.typography.fontSize.md,
    fontFamily: 'Monaco, Consolas, "Courier New", monospace',
    resize: 'vertical' as const,
    marginBottom: '16px',
    backgroundColor: theme.colors.background,
    color: theme.colors.textPrimary,
  };

  const buttonStyle = {
    padding: '10px 20px',
    backgroundColor: theme.colors.accent,
    color: theme.colors.surface,
    border: 'none',
    borderRadius: theme.borderRadius.md,
    cursor: 'pointer',
    fontSize: theme.typography.fontSize.md,
    fontWeight: theme.typography.fontWeight.medium,
    marginRight: '12px',
    marginBottom: '12px',
    display: 'inline-flex',
    alignItems: 'center',
    gap: '6px',
    transition: theme.transitions.fast,
    minWidth: '120px',
    whiteSpace: 'nowrap' as const,
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  };

  const secondaryButtonStyle = {
    ...buttonStyle,
    backgroundColor: theme.colors.textSecondary,
    minWidth: '100px',
  };

  const sampleButtonStyle = {
    ...buttonStyle,
    backgroundColor: theme.colors.success,
    fontSize: theme.typography.fontSize.sm,
    padding: '6px 12px',
    minWidth: '160px',
  };

  const previewStyle = {
    border: `1px solid ${theme.colors.border}`,
    borderRadius: theme.borderRadius.md,
    padding: '16px',
    backgroundColor: theme.colors.background,
    flexGrow: 1,
    overflow: 'hidden',
    display: 'flex',
    flexDirection: 'column' as const,
  };

  return (
    <div style={pageStyle}>
      <div style={headerStyle}>
        <h1 style={titleStyle}>{t('sql.title')}</h1>
        <button style={backButtonStyle} onClick={() => navigate('/')}>
          <ArrowLeftIcon size={16} /> {t('sql.back')}
        </button>
      </div>
      
      <div style={contentStyle}>
        <div style={leftPanelStyle}>
          <h2 style={{ marginTop: 0, marginBottom: '16px', color: theme.colors.textPrimary }}>{t('sql.query')}:</h2>
          
          <textarea
            style={textareaStyle}
            value={sqlQuery}
            onChange={(e) => setSqlQuery(e.target.value)}
            placeholder="Enter your SQL query here..."
          />
          
          {/* Generation Mode Selection */}
          <div style={{ marginBottom: '16px' }}>
            <h3 style={{ marginBottom: '8px', color: theme.colors.textPrimary, fontSize: theme.typography.fontSize.md }}>{t('sql.mode')}:</h3>
            <div style={{ display: 'flex', gap: '8px' }}>
              <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', color: theme.colors.textPrimary }} title={t('sql.newDiagramDesc')}>
                <input
                  type="radio"
                  name="generationMode"
                  value="new"
                  checked={generationMode === 'new'}
                  onChange={(e) => setGenerationMode(e.target.value as 'new' | 'add')}
                  style={{ marginRight: '6px' }}
                />
                {t('sql.newDiagram')}
              </label>
              <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', color: theme.colors.textPrimary, marginLeft: '16px' }} title={t('sql.addToExistingDesc')}>
                <input
                  type="radio"
                  name="generationMode"
                  value="add"
                  checked={generationMode === 'add'}
                  onChange={(e) => setGenerationMode(e.target.value as 'new' | 'add')}
                  style={{ marginRight: '6px' }}
                />
                {t('sql.addToExisting')}
              </label>
            </div>
          </div>

          <div style={{ marginBottom: '20px' }}>
            <button style={buttonStyle} onClick={handlePreview}>
              <SearchIcon size={14} /> {t('sql.preview')}
            </button>
            <button style={buttonStyle} onClick={handleGenerate} disabled={!previewData || isGenerating}>
              {isGenerating ? (<><ClockIcon size={14} /> {t('sql.analyzing')}</>) : (<><RocketIcon size={14} /> {t('sql.generate')}</>)}
            </button>
            <button style={secondaryButtonStyle} onClick={handleClear}>
              <TrashIcon size={14} /> Clear
            </button>
          </div>
          
          <div>
            <h3 style={{ marginBottom: '12px', color: theme.colors.textPrimary }}>Sample Queries:</h3>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
              {sampleQueries.map((sample, index) => (
                <button
                  key={index}
                  style={sampleButtonStyle}
                  onClick={() => setSqlQuery(sample.query)}
                  title={sample.query}
                >
                  {sample.name}
                </button>
              ))}
            </div>
          </div>
        </div>
        
        <div style={rightPanelStyle}>
          <h2 style={{ marginTop: 0, marginBottom: '16px', color: theme.colors.textPrimary }}>{t('sql.preview')}</h2>
          
          <div style={previewStyle}>
            {previewData ? (
              <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                <h3 style={{ color: '#28a745', marginTop: 0, marginBottom: '16px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <CheckIcon size={16} color="#28a745" /> Query Parsed Successfully!
                </h3>
                
                {/* Visual Diagram */}
                <div style={{ 
                  height: '400px', 
                  border: `1px solid ${theme.colors.border}`, 
                  borderRadius: theme.borderRadius.lg, 
                  marginBottom: '20px',
                  backgroundColor: theme.colors.surface
                }}>
                  <ReactFlow
                    nodes={previewData.nodes}
                    edges={previewData.edges}
                    nodeTypes={nodeTypes}
                    fitView
                    attributionPosition="bottom-right"
                  >
                    <Background variant={BackgroundVariant.Dots} gap={12} size={1} />
                    <Controls />
                    <MiniMap />
                  </ReactFlow>
                </div>
                
                {/* Node and Edge Details */}
                <div style={{ flexGrow: 1, overflow: 'auto' }} className={`custom-scrollbar ${isDark ? 'scrollbar-dark' : 'scrollbar-light'}`}>
                  <div style={{ marginBottom: '16px' }}>
                    <strong>{t('sql.generatedNodes', { nodes: previewData.nodes.length, edges: previewData.edges.length })}</strong>
                    <ul style={{ marginTop: '8px', paddingLeft: '20px' }}>
                      {previewData.nodes.map((node, index) => (
                        <li key={index} style={{ marginBottom: '4px' }}>
                          <strong>{node.data.label}</strong> 
                          <span style={{ color: '#666', fontSize: '12px' }}>
                            ({node.type})
                          </span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div>
                    <strong>Edges to be created:</strong> {previewData.edges.length}
                    <ul style={{ marginTop: '8px', paddingLeft: '20px' }}>
                      {previewData.edges.map((edge, index) => {
                        const sourceNode = previewData.nodes.find(n => n.id === edge.source);
                        const targetNode = previewData.nodes.find(n => n.id === edge.target);
                        return (
                          <li key={index} style={{ marginBottom: '4px' }}>
                            {sourceNode?.data.label} → {targetNode?.data.label}
                            <span style={{ color: '#666', fontSize: '12px' }}>
                              ({edge.data?.label || 'connection'})
                            </span>
                          </li>
                        );
                      })}
                    </ul>
                  </div>
                </div>
              </div>
            ) : (
              <div style={{ 
                textAlign: 'center', 
                color: '#666', 
                padding: '60px 20px',
                fontSize: '16px'
              }}>
                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '16px' }}>
                  <PenIcon size={20} color="#666" />
                  <div>
                    Enter a SQL query and click "Preview" to see the generated nodes and edges.
                    <br /><br />
                    Try one of the sample queries to get started!
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SQLGenerator;